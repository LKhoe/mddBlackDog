package br.ufes.nemo.ledzeppllin.blackdog.generator;

import br.ufes.nemo.ledzeppllin.blackdog.blackDog.Annotation;
import br.ufes.nemo.ledzeppllin.blackdog.blackDog.Description;
import br.ufes.nemo.ledzeppllin.blackdog.blackDog.Entity;
import br.ufes.nemo.ledzeppllin.blackdog.blackDog.Feature;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

@SuppressWarnings("all")
public class HelpersGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("gitlab.yml", this.createYml(resource));
    fsa.generateFile(".gitignore", this.createGitignore(resource));
    fsa.generateFile("requirements.txt", this.createRequirements(resource));
    fsa.generateFile("README.md", this.createReadMe(resource));
  }
  
  private CharSequence createYml(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("image: joyzoursky/python-chromedriver:latest");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Change pip\'s cache directory to be inside the project directory since we can");
    _builder.newLine();
    _builder.append("# only cache local items.");
    _builder.newLine();
    _builder.append("variables:");
    _builder.newLine();
    _builder.append("PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/pip\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Pip\'s cache doesn\'t store the python packages");
    _builder.newLine();
    _builder.append("# https://pip.pypa.io/en/stable/reference/pip_install/#caching");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# If you want to also cache the installed packages, you have to install");
    _builder.newLine();
    _builder.append("# them in a virtualenv and cache it as well.");
    _builder.newLine();
    _builder.append("cache:");
    _builder.newLine();
    _builder.append("paths:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("- .cache/pip");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("- venv/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("stages:");
    _builder.newLine();
    _builder.append("- test");
    _builder.newLine();
    _builder.append("- deploy");
    _builder.newLine();
    _builder.newLine();
    _builder.append("test:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("stage: test");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("script:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- python -V  # Print out python version for debugging");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- pip install virtualenv");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- virtualenv venv");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- source venv/bin/activate");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- pip install -r requirements.txt");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- cd backdog");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- python manage.py behave");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("only:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- development");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("deploy:");
    _builder.newLine();
    _builder.append("stage: deploy");
    _builder.newLine();
    _builder.append("script:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("- apt-get update -qy");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("- apt-get install -y ruby-dev");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("- gem install dpl");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("- dpl --provider=heroku --app=backdog --api-key=525d0728-82ff-492d-9393-e3c539deeb1e");
    _builder.newLine();
    _builder.append("only:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("- development");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence createGitignore(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# Byte-compiled / optimized / DLL files");
    _builder.newLine();
    _builder.append("__pycache__/");
    _builder.newLine();
    _builder.append("*.py[cod]");
    _builder.newLine();
    _builder.append("*$py.class");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# C extensions");
    _builder.newLine();
    _builder.append("*.so");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Distribution / packaging");
    _builder.newLine();
    _builder.append(".Python");
    _builder.newLine();
    _builder.append("build/");
    _builder.newLine();
    _builder.append("develop-eggs/");
    _builder.newLine();
    _builder.append("dist/");
    _builder.newLine();
    _builder.append("downloads/");
    _builder.newLine();
    _builder.append("eggs/");
    _builder.newLine();
    _builder.append(".eggs/");
    _builder.newLine();
    _builder.append("lib/");
    _builder.newLine();
    _builder.append("lib64/");
    _builder.newLine();
    _builder.append("parts/");
    _builder.newLine();
    _builder.append("sdist/");
    _builder.newLine();
    _builder.append("var/");
    _builder.newLine();
    _builder.append("wheels/");
    _builder.newLine();
    _builder.append("share/python-wheels/");
    _builder.newLine();
    _builder.append("*.egg-info/");
    _builder.newLine();
    _builder.append(".installed.cfg");
    _builder.newLine();
    _builder.append("*.egg");
    _builder.newLine();
    _builder.append("MANIFEST");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# PyInstaller");
    _builder.newLine();
    _builder.append("#  Usually these files are written by a python script from a template");
    _builder.newLine();
    _builder.append("#  before PyInstaller builds the exe, so as to inject date/other infos into it.");
    _builder.newLine();
    _builder.append("*.manifest");
    _builder.newLine();
    _builder.append("*.spec");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Installer logs");
    _builder.newLine();
    _builder.append("pip-log.txt");
    _builder.newLine();
    _builder.append("pip-delete-this-directory.txt");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Unit test / coverage reports");
    _builder.newLine();
    _builder.append("htmlcov/");
    _builder.newLine();
    _builder.append(".tox/");
    _builder.newLine();
    _builder.append(".nox/");
    _builder.newLine();
    _builder.append(".coverage");
    _builder.newLine();
    _builder.append(".coverage.*");
    _builder.newLine();
    _builder.append(".cache");
    _builder.newLine();
    _builder.append("nosetests.xml");
    _builder.newLine();
    _builder.append("coverage.xml");
    _builder.newLine();
    _builder.append("*.cover");
    _builder.newLine();
    _builder.append(".hypothesis/");
    _builder.newLine();
    _builder.append(".pytest_cache/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Translations");
    _builder.newLine();
    _builder.append("*.mo");
    _builder.newLine();
    _builder.append("*.pot");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Django stuff:");
    _builder.newLine();
    _builder.append("*.log");
    _builder.newLine();
    _builder.append("local_settings.py");
    _builder.newLine();
    _builder.append("db.sqlite3");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Flask stuff:");
    _builder.newLine();
    _builder.append("instance/");
    _builder.newLine();
    _builder.append(".webassets-cache");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Scrapy stuff:");
    _builder.newLine();
    _builder.append(".scrapy");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Sphinx documentation");
    _builder.newLine();
    _builder.append("docs/_build/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# PyBuilder");
    _builder.newLine();
    _builder.append("target/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Jupyter Notebook");
    _builder.newLine();
    _builder.append(".ipynb_checkpoints");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# IPython");
    _builder.newLine();
    _builder.append("profile_default/");
    _builder.newLine();
    _builder.append("ipython_config.py");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# pyenv");
    _builder.newLine();
    _builder.append(".python-version");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# celery beat schedule file");
    _builder.newLine();
    _builder.append("celerybeat-schedule");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# SageMath parsed files");
    _builder.newLine();
    _builder.append("*.sage.py");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Environments");
    _builder.newLine();
    _builder.append(".env");
    _builder.newLine();
    _builder.append(".venv");
    _builder.newLine();
    _builder.append("env/");
    _builder.newLine();
    _builder.append("venv/");
    _builder.newLine();
    _builder.append("ENV/");
    _builder.newLine();
    _builder.append("env.bak/");
    _builder.newLine();
    _builder.append("venv.bak/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Spyder project settings");
    _builder.newLine();
    _builder.append(".spyderproject");
    _builder.newLine();
    _builder.append(".spyproject");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Rope project settings");
    _builder.newLine();
    _builder.append(".ropeproject");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# mkdocs documentation");
    _builder.newLine();
    _builder.append("/site");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# mypy");
    _builder.newLine();
    _builder.append(".mypy_cache/");
    _builder.newLine();
    _builder.append(".dmypy.json");
    _builder.newLine();
    _builder.append("dmypy.json");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Pyre type checker");
    _builder.newLine();
    _builder.append(".pyre/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("## Arquivos gerados por Mac");
    _builder.newLine();
    _builder.append("*.DS_Store");
    _builder.newLine();
    _builder.newLine();
    _builder.append("##Staticfiles");
    _builder.newLine();
    _builder.append("core/static");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence createRequirements(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("asgiref==3.2.10");
    _builder.newLine();
    _builder.append("astroid==2.4.2");
    _builder.newLine();
    _builder.append("behave==1.2.6");
    _builder.newLine();
    _builder.append("behave-django==0.4.0");
    _builder.newLine();
    _builder.append("colorama==0.4.3");
    _builder.newLine();
    _builder.append("commitizen==1.23.0");
    _builder.newLine();
    _builder.append("decli==0.5.1");
    _builder.newLine();
    _builder.append("dj-database-url==0.5.0");
    _builder.newLine();
    _builder.append("Django==3.0.8");
    _builder.newLine();
    _builder.append("django-crispy-forms==1.9.2");
    _builder.newLine();
    _builder.append("django-heroku==0.3.1");
    _builder.newLine();
    _builder.append("gunicorn==20.0.4");
    _builder.newLine();
    _builder.append("isort==4.3.21");
    _builder.newLine();
    _builder.append("Jinja2==2.11.2");
    _builder.newLine();
    _builder.append("lazy-object-proxy==1.4.3");
    _builder.newLine();
    _builder.append("MarkupSafe==1.1.1");
    _builder.newLine();
    _builder.append("mccabe==0.6.1");
    _builder.newLine();
    _builder.append("packaging==20.4");
    _builder.newLine();
    _builder.append("parse==1.16.0");
    _builder.newLine();
    _builder.append("parse-type==0.5.2");
    _builder.newLine();
    _builder.append("prompt-toolkit==3.0.5");
    _builder.newLine();
    _builder.append("psycopg2==2.7.5");
    _builder.newLine();
    _builder.append("pylint==2.5.3");
    _builder.newLine();
    _builder.append("pylint-django==2.1.0");
    _builder.newLine();
    _builder.append("pylint-plugin-utils==0.6");
    _builder.newLine();
    _builder.append("pyparsing==2.4.7");
    _builder.newLine();
    _builder.append("pytz==2020.1");
    _builder.newLine();
    _builder.append("questionary==1.5.2");
    _builder.newLine();
    _builder.append("selenium==2.53.6");
    _builder.newLine();
    _builder.append("six==1.15.0");
    _builder.newLine();
    _builder.append("sqlparse==0.3.1");
    _builder.newLine();
    _builder.append("termcolor==1.1.0");
    _builder.newLine();
    _builder.append("toml==0.10.1");
    _builder.newLine();
    _builder.append("tomlkit==0.5.11");
    _builder.newLine();
    _builder.append("typed-ast==1.4.1");
    _builder.newLine();
    _builder.append("wcwidth==0.2.5");
    _builder.newLine();
    _builder.append("whitenoise==5.2.0");
    _builder.newLine();
    _builder.append("wrapt==1.12.1");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence createReadMe(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# BlackDog");
    _builder.newLine();
    _builder.append("Website de consulta em projetos .");
    _builder.newLine();
    _builder.newLine();
    _builder.append("## Goal");
    _builder.newLine();
    _builder.append("- Este sistema tem por objetivo criação, atualização, consulta e deleção de dados relacionados a projetos.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("## Enviroment");
    _builder.newLine();
    _builder.append("- A aplicação foi construida para funcionar no servidor Pyhtonanywhere");
    _builder.newLine();
    _builder.newLine();
    _builder.append("## Usage");
    _builder.newLine();
    _builder.append("- Acesse o link http://koee.pythonanywhere.com/");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    {
      Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
      for(final Entity e : _filter) {
        {
          EList<Annotation> _annotations = e.getAnnotations();
          boolean _tripleNotEquals = (_annotations != null);
          if (_tripleNotEquals) {
            String _join = IterableExtensions.join(e.getAnnotations());
            _builder.append(_join);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Description _description = e.getDescription();
          boolean _tripleNotEquals_1 = (_description != null);
          if (_tripleNotEquals_1) {
            String _textfield = e.getDescription().getTextfield();
            _builder.append(_textfield);
            _builder.newLineIfNotEmpty();
          }
        }
        String _name = e.getName();
        _builder.append(_name);
        {
          Entity _superType = e.getSuperType();
          boolean _tripleNotEquals_2 = (_superType != null);
          if (_tripleNotEquals_2) {
            _builder.append("(");
            String _name_1 = e.getSuperType().getName();
            _builder.append(_name_1);
            _builder.append(")");
          } else {
            _builder.append("(models.Model)");
          }
        }
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        {
          EList<Feature> _features = e.getFeatures();
          for(final Feature f : _features) {
            _builder.append("    ");
            String _lowerCase = f.getName().toLowerCase();
            _builder.append(_lowerCase, "    ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("            ");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
